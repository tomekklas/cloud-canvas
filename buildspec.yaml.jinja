version: 0.2
env:
  shell: bash
  variables:
    VERSION_NUMBER: v1
    PROJECT_SLUG: {{ _copier_conf.dst_path }}

phases:
  install:
    commands:
      - env
      - aws --version
      - bash --version
  pre_build:
    commands:
      - echo "Understanding the environment..."
      - |-
        if [ -n "$CODEBUILD_BUILD_ID" ]; then
            BUILD_ARN=$(aws codebuild batch-get-builds --ids "$CODEBUILD_BUILD_ID" --query 'builds[0].arn' --output text)
            if [ "$BUILD_ARN" != "None" ]; then
                echo "Running inside actual AWS CodeBuild."
            else
                echo "Running inside local CodeBuild container."
            fi
        else
            echo "Not running inside a CodeBuild environment."
        fi

      - echo "Preparing upload directory..."
      - |-
        UPLOAD_DIRECTORY="/tmp/upload"
        mkdir -p "$UPLOAD_DIRECTORY"
        echo "Upload Directory set to: $UPLOAD_DIRECTORY"

  build:
    commands:
      - |-
        BUILD_ID=$(cat /proc/sys/kernel/random/uuid)
        echo "Build ID: $BUILD_ID"
        echo "Build started on $(date)"
        echo "Initiating build and packaging of function..."

      - |-
        build_lambda() {
          local LAMBDA_PATH="$1"
          local LAMBDA_NAME=$(basename "$LAMBDA_PATH")

          echo "Building lambda: $LAMBDA_NAME in $LAMBDA_PATH"

          mkdir -p "${UPLOAD_DIRECTORY}/${LAMBDA_PATH}"
          pushd "${CODEBUILD_SRC_DIR}/${LAMBDA_PATH}"

          if [[ -f requirements.txt ]]; then
              echo "Installing dependencies for $LAMBDA_NAME..."
              pip install -r requirements.txt -t lib
          else
              echo "No requirements.txt found for $LAMBDA_NAME."
          fi

          echo "Listing files for $LAMBDA_NAME:"
          ls -al

          if find ./lib -mindepth 1 -maxdepth 1 | read; then
              echo "Zipping deployment package for $LAMBDA_NAME..."
              pushd lib
              zip -r9 "../${LAMBDA_NAME}.zip" .
              popd
          else
              echo "No deployment package to zip for $LAMBDA_NAME."
          fi

          zip -g "${LAMBDA_NAME}.zip" lambda_function.py
          mv "${LAMBDA_NAME}.zip" "${UPLOAD_DIRECTORY}/${LAMBDA_PATH}"
          popd
        }

        echo "Searching for lambda functions and layers..."
        find . -type d -regex '.*/lambda/functions/[^/]*$' -or -regex '.*/lambda/layer/[^/]*$' | while read -r dir_path; do
            build_lambda "$dir_path"
        done

        echo "Displaying files in upload directory: $UPLOAD_DIRECTORY"
        find "$UPLOAD_DIRECTORY" -type f

      - |-
        echo "Uploading artifacts..."
        aws s3 cp --recursive "$UPLOAD_DIRECTORY" "s3://deployment-idea-test-bucket/artefacts/${PROJECT_SLUG}/${VERSION_NUMBER}/${BUILD_ID}/"

artifacts:
  discard-paths: no
  base-directory: ${CODEBUILD_SRC_DIR}
  files: ${SOURCE_PATH}/**
