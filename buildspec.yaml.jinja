version: 0.2
env:
  shell: bash
  variables:
    VERSION_NUMBER: {{ PRODUCT_VERSION }}
    PROJECT_SLUG: {{ _copier_conf.dst_path }}
    BUCKET_NAME_DEV: {{ deployment_dev_bucket }}
    BUCKET_NAME_PROD: {{ deployment_prod_bucket }}
  exported-variables:
    - BUILD_ID
    - BUILD_ID_DIR
    - LATEST_DIR
    - ARTEFACTS_DIR
    - BUILD_DATE

phases:
  install:
    commands:
      - echo "Installing dependencies..."
      - aws --version
      - bash --version
      - echo "Installing rain v1.6.0 for YAML formatting"
      - curl -LO https://github.com/aws-cloudformation/rain/releases/download/v1.6.0/rain-v1.6.0_linux-amd64.zip
      - unzip rain-v1.6.0_linux-amd64.zip
      - sudo mv rain-v1.6.0_linux-amd64/rain /usr/local/bin/
      - rm -rf rain-v1.6.0_linux-amd64.zip rain-v1.6.0_linux-amd64
      - rain --version

  pre_build:
    commands:
      - echo "Setting up environment variables and determining build context..."
      - |-
        if [[ ! -z $CODEBUILD_BUILD_ID && $CODEBUILD_BUILD_ID != local:00000000-0000-0000-0000-000000000000 ]]; then
            BUILD_ARN=$(aws codebuild batch-get-builds --ids "$CODEBUILD_BUILD_ID" --query 'builds[0].arn' --output text)
            if [ "$BUILD_ARN" != "None" ]; then
                echo "Detected AWS CodeBuild environment."
                ARTIFACT_BUCKET=${BUCKET_NAME_PROD}
                BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d ':' -f 2)
            else
                echo "Detected local CodeBuild environment."
                ARTIFACT_BUCKET=${BUCKET_NAME_DEV}
                BUILD_ID="local-$(date +%Y%m%d%H%M%S)"
            fi
        else
            echo "Not running in a recognized CodeBuild environment."
            ARTIFACT_BUCKET=${BUCKET_NAME_DEV}
            BUILD_ID="local-$(date +%Y%m%d%H%M%S)"
        fi
        export BUILD_ID_DIR="${PROJECT_SLUG}/${VERSION_NUMBER}/${BUILD_ID}/"
        export LATEST_DIR="${PROJECT_SLUG}/${VERSION_NUMBER}/_latest/"
        export ARTEFACTS_DIR="${PROJECT_SLUG}/${VERSION_NUMBER}/_artefacts"
        export ARTIFACT_BUCKET
        mkdir -p "$BUILD_ID_DIR" "$LATEST_DIR" "$ARTEFACTS_DIR"

        BUILD_DATE=$(date +%Y-%m-%d)
        export BUILD_DATE
  build:
    commands:
      - echo "Initiating Lambda build and packaging process..."
      - |-
        echo "Building Lambda functions"
        build_lambda() {
            local LAMBDA_PATH="$1"
            local ARTIFACT_BUCKET="$2"
            local RELATIVE_PATH=${LAMBDA_PATH#"./"} # Unique identifier for each Lambda
            local LAMBDA_NAME=$(basename "${RELATIVE_PATH}")
            local MODULE_NAME=$(dirname "${RELATIVE_PATH}")

            local FULL_LAMBDA_NAME="${MODULE_NAME}/${LAMBDA_NAME}"

            echo "Building lambda: $FULL_LAMBDA_NAME in $LAMBDA_PATH"
            pushd "${CODEBUILD_SRC_DIR}/${LAMBDA_PATH}" || exit

            lambda_identifier=$(find . -type f -exec md5sum {} \; | sort -k 2 | md5sum | awk '{print $1}')

            local LAMBDA_SAVE_PATH="${CODEBUILD_SRC_DIR}/${ARTEFACTS_DIR}/${MODULE_NAME}/${LAMBDA_NAME}"

            mkdir -p "${LAMBDA_SAVE_PATH}"

            # Echo the mapping in the desired format
            echo "<<<${FULL_LAMBDA_NAME}>>>:${ARTEFACTS_DIR}/${MODULE_NAME}/${LAMBDA_NAME}/${lambda_identifier}.zip" >> /tmp/lambda_mapping.txt

            if aws s3 ls "s3://${ARTIFACT_BUCKET}/${ARTEFACTS_DIR}/${MODULE_NAME}/${LAMBDA_NAME}/${lambda_identifier}.zip"; then
                echo "Lambda exists in S3, skipping build."
                popd || exit
                return
            fi

            if [[ -f requirements.txt ]]; then
                echo "Installing dependencies for $FULL_LAMBDA_NAME..."
                pip install -r requirements.txt -t lib || { echo "Dependency installation failed"; exit 1; }
            fi

            echo "Zipping deployment package..."
            if find ./lib -mindepth 1 -maxdepth 1 | read; then
                pushd lib
                zip -r9 "../${lambda_identifier}.zip" . || { echo "Zipping failed"; popd; exit 1; }
                popd
            fi

            rm -rf lib
            zip -g "${lambda_identifier}.zip" * || { echo "Zipping failed"; exit 1; }
            rm -f lambda_function.py
            popd || exit

            mv "${CODEBUILD_SRC_DIR}/${LAMBDA_PATH}/${lambda_identifier}.zip" "${LAMBDA_SAVE_PATH}/${lambda_identifier}.zip" || { echo "Moving ZIP file failed"; exit 1; }
            rm -rf "${CODEBUILD_SRC_DIR}/${LAMBDA_PATH}"
        }

        find . -type d -regex '.*/lambda/functions/[^/]*$' -or -regex '.*/lambda/layers/[^/]*$' | while read -r dir_path; do
            build_lambda "${dir_path}" "${ARTIFACT_BUCKET}"
        done

      - echo "Replacing placeholders in configuration files..."
      - |-
        sed -i "s/<<<BUILD_ID>>>/$BUILD_ID/g" $(find . -type f) || { echo "Placeholder replacement failed"; exit 1; }
        sed -i "s/<<<ARTIFACT_BUCKET>>>/$ARTIFACT_BUCKET/g" $(find . -type f) || { echo "Placeholder replacement failed"; exit 1; }
        sed -i "s/<<<BUILD_DATE>>>/$BUILD_DATE/g" $(find . -type f) || { echo "Placeholder replacement failed"; exit 1; }

      - echo "Processing lambda_mapping.txt for Lambda name replacement..."
      - |-
        if [ -s /tmp/lambda_mapping.txt ]; then
            while IFS=":" read -r original_name new_name; do
                find . -type f -name "*.yaml" -exec sed -i "s|${original_name}|${new_name}|g" {} \; || { echo "Lambda name replacement failed"; exit 1; }
            done < /tmp/lambda_mapping.txt
        else
            echo "/tmp/lambda_mapping.txt is empty or does not exist."
        fi

      - echo "Formatting YAML files..."
      - |-
        find . -name "*.yaml" | while read -r file; do
            if [[ -s "$file" ]]; then
                rain fmt "$file" > "${file}.tmp" && mv "${file}.tmp" "$file" || { echo "YAML formatting failed"; exit 1; }
            fi
        done

      - echo "Preparing directory structure for S3 upload..."
      - |-
        find . -mindepth 1 -maxdepth 1 -type d ! -name "${PROJECT_SLUG##*/}" -exec rsync -rvam {} "${BUILD_ID_DIR}/" \;
        rsync -rva "${BUILD_ID_DIR}/" "${LATEST_DIR}/"

      - echo "Uploading build artifacts to S3..."
      - aws s3 sync "${CODEBUILD_SRC_DIR}/${PROJECT_SLUG}" "s3://${ARTIFACT_BUCKET}/${PROJECT_SLUG}"
  post_build:
    commands:
      - echo "Post-build cleanup and finalization..."
      - echo "CodeBuild process completed successfully!"

# artifacts:
#   discard-paths: no
#   base-directory: ${CODEBUILD_SRC_DIR}
#   files: ${SOURCE_PATH}/**