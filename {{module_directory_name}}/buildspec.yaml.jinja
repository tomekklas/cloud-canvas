version: 0.2
env:
  shell: bash
  variables:
    VERSION_NUMBER: {{ PRODUCT_VERSION }}
    PROJECT_SLUG: {{ _copier_conf.dst_path }}
    BUCKET_NAME_DEV: {{ deployment_dev_bucket | trim }}
    BUCKET_NAME_STAGING: {{ deployment_staging_bucket | trim }}
    BUCKET_NAME_PROD: {{ deployment_prod_bucket | trim }}
    MODULE_NAME: {{ module_directory_name }}
  exported-variables:
    - BUILD_ID
    - BUILD_ID_DIR
    - LATEST_DIR
    - ARTEFACTS_DIR
    - BUILD_DATE

phases:
  install:
    commands:
      - echo "Installing dependencies..."
      - aws --version
      - bash --version
      - echo "Installing rain v1.11.0 for YAML formatting"
      - curl -LO https://github.com/aws-cloudformation/rain/releases/download/v1.11.0/rain-v1.11.0_linux-amd64.zip
      - unzip rain-v1.11.0_linux-amd64.zip
      - sudo mv rain-v1.11.0_linux-amd64/rain /usr/local/bin/
      - rm -rf rain-v1.11.0_linux-amd64.zip rain-v1.11.0_linux-amd64
      - rain --version

  pre_build:
    commands:
      - echo "Setting up environment variables and determining build context..."
      - |-
        # Determine if running in AWS CodeBuild environment
        if [[ ! -z $CODEBUILD_BUILD_ID && $CODEBUILD_BUILD_ID != local:00000000-0000-0000-0000-000000000000 ]]; then
            BUILD_ARN=$(aws codebuild batch-get-builds --ids "$CODEBUILD_BUILD_ID" --query 'builds[0].arn' --output text)
            if [ "$BUILD_ARN" != "None" ]; then
                echo "Detected AWS CodeBuild environment."
                ARTIFACT_BUCKET=${BUCKET_NAME_PROD}
                BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d ':' -f 2)
            else
                echo "Detected local CodeBuild environment."
                ARTIFACT_BUCKET=${BUCKET_NAME_DEV}
                BUILD_ID="local-$(date +%Y%m%d%H%M%S)"
            fi
        else
            echo "Not running in a recognized CodeBuild environment."
            ARTIFACT_BUCKET=${BUCKET_NAME_DEV}
            BUILD_ID="local-$(date +%Y%m%d%H%M%S)"
        fi

        # Override temporary values based on the environment
        if [ "$ENVIRONMENT" = "production" ]; then
          echo "Building for production"
          ARTIFACT_BUCKET=${BUCKET_NAME_PROD}
          BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d ':' -f 2)
        elif [ "$ENVIRONMENT" = "test" ]; then
          echo "Building for test"
          ARTIFACT_BUCKET=${BUCKET_NAME_DEV}
          BUILD_ID=$(echo $CODEBUILD_BUILD_ID | cut -d ':' -f 2)
        else
          echo "Building for development"
        fi

        # Set and export environment variables
        export BUILD_ID_DIR="${PROJECT_SLUG}/${VERSION_NUMBER}/${BUILD_ID}/"
        export LATEST_DIR="${PROJECT_SLUG}/${VERSION_NUMBER}/_latest/"
        export ARTIFACTS_DIR="${CODEBUILD_SRC_DIR}/${PROJECT_SLUG}/${VERSION_NUMBER}/_artifacts"
        export ARTIFACTS_BUCKET_DIR="${PROJECT_SLUG}/${VERSION_NUMBER}/_artifacts"
        export ARTIFACT_BUCKET
        export BUILD_DATE=$(date +%Y-%m-%d)

        # Create necessary directories
        mkdir -p "$BUILD_ID_DIR" "$LATEST_DIR" "$ARTIFACTS_DIR"

        # Print all environment variables
        printenv | sort

  build:
    commands:
      - echo "Initiating Lambda build and packaging process..."

      - |-
        echo "Building Lambda functions and layers"

        build_lambda_function() {
          local LAMBDA_PATH="$1"
          local ARTIFACT_BUCKET="$2"

          # Change to the function directory
          cd "${CODEBUILD_SRC_DIR}/${LAMBDA_PATH}" || exit 1

          # Generate zip hash
          LAMBDA_HASH=$(find . -type f -exec md5sum {} \; | sort -k 2 | md5sum | awk '{print $1}')

          # Set the zip path
          LAMBDA_ZIP_PATH="${ARTIFACTS_DIR}/${LAMBDA_PATH}/${LAMBDA_HASH}.zip"

          # Set the placeholder key
          LAMBDA_PLACEHOLDER_KEY="${MODULE_NAME}/${LAMBDA_PATH}"

          # Write placeholder replacement
          echo "<<<${LAMBDA_PLACEHOLDER_KEY}>>>:${ARTIFACTS_BUCKET_DIR}/${LAMBDA_PATH}/${LAMBDA_HASH}.zip" >> /tmp/lambda_mapping.txt

          # Skip build if the artifact already exists in S3
          if aws s3 ls "s3://${ARTIFACT_BUCKET}/${ARTIFACTS_BUCKET_DIR}/${LAMBDA_PATH}/${LAMBDA_HASH}.zip"; then
              echo "Lambda function exists in S3, skipping build."
              cd - || exit 1
              return
          fi

          # Install dependencies if requirements.txt is present
          if [[ -f requirements.txt ]]; then
              echo "Installing dependencies for ${LAMBDA_PATH}..."
              pip install -r requirements.txt -t lib || { echo "Dependency installation failed"; exit 1; }
          fi

          # Create zip package
          echo "Zipping deployment package..."
          if [[ -d lib ]] && find lib -mindepth 1 -maxdepth 1 | read; then
              pushd lib || exit 1
              zip -r9 "../${LAMBDA_HASH}.zip" . || { echo "Zipping failed"; popd; exit 1; }
              popd || exit 1
          fi
          zip -r9 "${LAMBDA_HASH}.zip" * || { echo "Zipping lambda failed"; exit 1; }

          # Move the zip to the artifacts directory
          mkdir -p "${ARTIFACTS_DIR}/${LAMBDA_PATH}"
          mv "${LAMBDA_HASH}.zip" "${ARTIFACTS_DIR}/${LAMBDA_PATH}/"

          cd - || exit 1
        }

        build_lambda_layer() {
          local LAYER_PATH="$1"
          local ARTIFACT_BUCKET="$2"

          # Change to the layer directory
          cd "${CODEBUILD_SRC_DIR}/${LAYER_PATH}" || exit 1

          # Generate zip hash
          LAYER_HASH=$(find . -type f -exec md5sum {} \; | sort -k 2 | md5sum | awk '{print $1}')

          # Set the zip path
          LAYER_ZIP_PATH="${ARTIFACTS_DIR}/${LAYER_PATH}/${LAYER_HASH}.zip"

          # Set the placeholder key
          LAYER_PLACEHOLDER_KEY="${MODULE_NAME}/${LAYER_PATH}"

          # Write placeholder replacement
          echo "<<<${LAYER_PLACEHOLDER_KEY}>>>:${ARTIFACTS_BUCKET_DIR}/${LAYER_PATH}/${LAYER_HASH}.zip" >> /tmp/lambda_mapping.txt

          # Skip build if the artifact already exists in S3
          if aws s3 ls "s3://${ARTIFACT_BUCKET}/${ARTIFACTS_BUCKET_DIR}/${LAYER_PATH}/${LAYER_HASH}.zip"; then
              echo "Lambda layer exists in S3, skipping build."
              cd - || exit 1
              return
          fi

          # Create zip package
          echo "Zipping layer package..."
          zip -r9 "${LAYER_HASH}.zip" * || { echo "Zipping layer failed"; exit 1; }

          # Move the zip to the artifacts directory
          mkdir -p "${ARTIFACTS_DIR}/${LAYER_PATH}"
          mv "${LAYER_HASH}.zip" "${ARTIFACTS_DIR}/${LAYER_PATH}/"

          cd - || exit 1
        }

        # Build Lambda functions
        find . -type d -regex '.*/lambda/functions/[^/]*$' | sed 's|^\./||' | while read -r DIR_PATH; do
          echo "Building lambda function: ${DIR_PATH}"
          build_lambda_function "${DIR_PATH}" "${ARTIFACT_BUCKET}"
        done

        # Build Lambda layers
        find . -type d -regex '.*/lambda/layers/[^/]*$' | sed 's|^\./||' | while read -r DIR_PATH; do
          echo "Building lambda layer: ${DIR_PATH}"
          build_lambda_layer "${DIR_PATH}" "${ARTIFACT_BUCKET}"
        done

      - echo "Replacing placeholders in configuration files..."
      - |-
        find . -type f | while read -r file; do
          sed -i "s/<<<BUILD_ID>>>/$BUILD_ID/g" "$file" || exit 1
          sed -i "s/<<<ARTIFACT_BUCKET>>>/$ARTIFACT_BUCKET/g" "$file" || exit 1
          sed -i "s/<<<BUILD_DATE>>>/$BUILD_DATE/g" "$file" || exit 1
          sed -i "s/<<<VERSION_NUMBER>>>/$VERSION_NUMBER/g" "$file" || exit 1
          sed -i "s/<<<PROJECT_SLUG>>>/$PROJECT_SLUG/g" "$file" || exit 1
        done

      - echo "Processing lambda_mapping.txt for Lambda name replacement..."
      - |-
        if [ -s /tmp/lambda_mapping.txt ]; then
            while IFS=":" read -r original_name new_name; do
                find . -type f -name "*.yaml" -exec sed -i "s|${original_name}|${new_name}|g" {} \; || { echo "Lambda name replacement failed"; exit 1; }
            done < /tmp/lambda_mapping.txt
        else
            echo "/tmp/lambda_mapping.txt is empty or does not exist."
        fi

      - echo "Formatting YAML files..."
      - |-
        find . -name "*.yaml" | while read -r file; do
            if [[ -s "$file" ]]; then
                rain fmt "$file" > "${file}.tmp" && mv "${file}.tmp" "$file" || { echo "YAML formatting failed"; exit 1; }
            fi
        done

      - echo "Preparing directory structure for S3 upload..."
      - |-
        rsync -rva ./templates "${BUILD_ID_DIR}"
        rsync -rva ./templates "${LATEST_DIR}"

      - echo "Uploading build artifacts to S3..."
      - aws s3 sync "./${PROJECT_SLUG}" "s3://${ARTIFACT_BUCKET}/${PROJECT_SLUG}"

  post_build:
    commands:
      - echo "Post-build cleanup and finalization..."
      - echo "CodeBuild process completed successfully!"

artifacts:
  discard-paths: no
  files: 
    - ${CODEBUILD_SRC_DIR}/${PROJECT_SLUG}/${VERSION_NUMBER}/_latest/templates/stack.yaml
