{% if is_first_iteration %}
    Next: Process the payload ({{ module_name }})
{% endif %}
   Process the payload ({{ module_name }}):
    Type: Task
    Resource: arn:aws:states:::lambda:invoke
    OutputPath: $.Payload
    Parameters:
      Payload.$: $
      FunctionName: ${ProcessManifestLambda}
    Retry:
      - ErrorEquals:
          - Lambda.ServiceException
          - Lambda.AWSLambdaException
          - Lambda.SdkClientException
          - Lambda.TooManyRequestsException
        IntervalSeconds: 2
        MaxAttempts: 6
        BackoffRate: 2
    Comment: this is a test comment
    Next: Map the process ({{ module_name }})

  Map the process ({{ module_name }}):
    Type: Map
    ToleratedFailurePercentage: 10
    ItemsPath: $
    End: true
    Comment: Distributed map processing. Iterates over each item, processing it
      based on defined steps.

    ItemReader ({{ module_name }}):
      Resource: arn:aws:states:::s3:listObjectsV2
      Parameters:
        Bucket.$: $.body.Bucket
        Prefix.$: $.body.Prefix

    ItemProcessor ({{ module_name }}):
      ProcessorConfig:
        Mode: DISTRIBUTED
        ExecutionType: STANDARD
      StartAt: Get config from S3 ({{ module_name }})

      States:

        Get config from S3 ({{ module_name }}):
          Type: Task
          Resource: arn:aws:states:::aws-sdk:s3:getObject
          Next: Check existing setup ({{ module_name }})
          Comment: Retrieve configuration from S3 based on the provided key.
          Parameters:
            Bucket: deployment-idea-test-bucket
            Key.$: $.Key
          ResultSelector:
            Parameters.$: States.StringToJson($.Body)

        Check existing setup ({{ module_name }}):
          Type: Task
          Resource: arn:aws:states:::lambda:invoke
          OutputPath: $.Payload
          Credentials:
            RoleArn.$: $.Parameters.RoleArnToAssume
          Parameters:
            Payload.$: $
            FunctionName: CloudCanvasCheckExistingSetup
          Retry:
            - ErrorEquals:
                - Lambda.ServiceException
                - Lambda.AWSLambdaException
                - Lambda.SdkClientException
                - Lambda.TooManyRequestsException
              IntervalSeconds: 1
              MaxAttempts: 3
              BackoffRate: 2
          Next: What action is required ({{ module_name }})?

        What action is required ({{ module_name }})?:
          Type: Choice
          Choices:
            - Variable: $.Parameters.Action
              StringEquals: Create
              Next: Create the stack ({{ module_name }})
            - Variable: $.Parameters.Action
              StringEquals: Delete
              Next: Delete the stack ({{ module_name }})
            - Variable: $.Parameters.Action
              StringEquals: Update
              Next: Update the stack ({{ module_name }})
          Default: Succeed

        Create the stack ({{ module_name }}):
          Type: Task
          Next: Wait for action
          Credentials:
            RoleArn.$: $.Parameters.RoleArnToAssume
          Parameters:
            StackName.$: States.Format('{}', $.Parameters.StackName)
            TemplateURL.$: States.Format('{}', $.Parameters.TemplateUrl)
            Capabilities:
              - CAPABILITY_AUTO_EXPAND
              - CAPABILITY_IAM
            Tags.$: $.Parameters.Tags
            Parameters.$: $.Parameters.Parameters
          Resource: arn:aws:states:::aws-sdk:cloudformation:createStack
          ResultPath: null

        Update the stack ({{ module_name }}):
          Type: Task
          Parameters:
            StackName.$: States.Format('{}', $.Parameters.StackName)
            TemplateURL.$: States.Format('{}', $.Parameters.TemplateUrl)
            Capabilities:
              - CAPABILITY_AUTO_EXPAND
              - CAPABILITY_IAM
            Parameters.$: $.Parameters.Parameters
            Tags.$: $.Parameters.Tags
          Resource: arn:aws:states:::aws-sdk:cloudformation:updateStack
          Credentials:
            RoleArn.$: $.Parameters.RoleArnToAssume
          Next: Wait for action ({{ module_name }})
          ResultPath: null

        Delete the stack ({{ module_name }}):
          Type: Task
          Credentials:
            RoleArn.$: $.Parameters.RoleArnToAssume
          Parameters:
            StackName.$: States.Format('{}', $.Parameters.StackName)
          Resource: arn:aws:states:::aws-sdk:cloudformation:deleteStack
          Next: Wait for action ({{ module_name }})
          ResultPath: null

        Wait for action ({{ module_name }}):
          Type: Wait
          Seconds: 10
          Next: Check action status

        Check action status ({{ module_name }}):
          Type: Task
          Next: Decide based on status ({{ module_name }})
          Credentials:
            RoleArn.$: $.Parameters.RoleArnToAssume
          Parameters:
            StackName.$: States.Format('{}', $.Parameters.StackName)
          Resource: arn:aws:states:::aws-sdk:cloudformation:describeStacks
          ResultSelector:
            Status.$: $.Stacks[0].StackStatus
          ResultPath: $.StackStatus
          Catch:
            - ErrorEquals:
                - States.TaskFailed
              ResultPath: $
              Next: Succeed ({{ module_name }})

        Decide based on status ({{ module_name }}):
          Type: Choice
          Choices:
            - Or:
                - Variable: $.StackStatus.Status
                  StringEquals: CREATE_IN_PROGRESS
                - Variable: $.StackStatus.Status
                  StringEquals: UPDATE_IN_PROGRESS
                - Variable: $.StackStatus.Status
                  StringEquals: DELETE_IN_PROGRESS
                - Variable: $.StackStatus.Status
                  StringEquals: ROLLBACK_IN_PROGRESS
                - Variable: $.StackStatus.Status
                  StringEquals: UPDATE_ROLLBACK_IN_PROGRESS
                - Variable: $.StackStatus.Status
                  StringEquals: UPDATE_COMPLETE_CLEANUP_IN_PROGRESS
              Next: Wait for action ({{ module_name }})
            - Or:
                - Variable: $.StackStatus.Status
                  StringEquals: CREATE_COMPLETE
                - Variable: $.StackStatus.Status
                  StringEquals: UPDATE_COMPLETE
                - Variable: $.StackStatus.Status
                  StringEquals: DELETE_COMPLETE
                - Variable: $.StackStatus.Status
                  StringEquals: ROLLBACK_COMPLETE
                - Variable: $.StackStatus.Status
                  StringEquals: UPDATE_ROLLBACK_COMPLETE
              Next: Succeed ({{ module_name }})
            - Or:
                - Variable: $.StackStatus.Status
                  StringEquals: CREATE_FAILED
                - Variable: $.StackStatus.Status
                  StringEquals: DELETE_FAILED
                - Variable: $.StackStatus.Status
                  StringEquals: ROLLBACK_FAILED
                - Variable: $.StackStatus.Status
                  StringEquals: UPDATE_FAILED
                - Variable: $.StackStatus.Status
                  StringEquals: UPDATE_ROLLBACK_FAILED
              Next: Failed ({{ module_name }})
          Default: Succeed ({{ module_name }})

        Succeed ({{ module_name }}):
          Type: Pass
          End: true

        Failed ({{ module_name }}):
          Type: Fail
