{% set module_name_path_safe = "_deployment" -%}
---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::LanguageExtensions
Description: >-   
  {% if short_module_description %}{{ short_module_description }}{% endif %}

Metadata:
  {% if owner_name %}Author: {{ owner_name }}{% endif %}
  {% if owner_email %}Email: {{ owner_email }}{% endif %}
  Repository name: {{ _copier_conf.dst_path }}
  Cloud Canvas version: {{ CLOUD_CANVAS_TEMPLATE_VERSION }}
  Build date: <<<BUILD_DATE>>>
  Version: {{ PRODUCT_VERSION }}
  #License:

Parameters:

  ApiDomain:
    Type: String
    Description: Incl https TODO Pass in more secure way

  ApiVersion:
    Type: String
    Description: TODO Pass in more secure way

  ApiKey:
    Type: String
    NoEcho: true
    Description: TODO Pass in more secure way

  Environment:
    Type: String
    Default: Prod
    AllowedValues:
      - Dev
      - Prod

  ProcessingRoleToAssume:
    Type: String
    Description: The name of the specific role that StepFunctionRole can assume in spoke accounts
    Default: CloudCanvasGenericCrossAccountAdminRole

  LogRetentionInDays:
    Type: Number
    Default: 180
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653

Conditions: 
  IsProd: !Equals [!Ref Environment, Prod]
  IsDev: !Equals [!Ref Environment, Dev]

Mappings:
  Environment:
    Dev:
      StateMachineLogLevel: ALL
    Prod:
      StateMachineLogLevel: ERROR

Resources:

  ############################################
  # Utilities Lambda Layer
  UtilitiesLambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      Description: {{ module_name }} - Utilities Lambda Layer
      CompatibleArchitectures:
        - arm64
      CompatibleRuntimes: 
        - python3.11
      Content: 
        S3Bucket: <<<ARTIFACT_BUCKET>>>
        S3Key: <<<{{- module_name_path_safe -}}_lambda_layers_utilities>>>
  # Utilities lambda layer
  ############################################

  ############################################
  # ValidateInput Lambda related
  ValidateInputLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !If [ IsDev, arn:aws:iam::aws:policy/AdministratorAccess, !Ref AWS::NoValue ]
      Policies:
      - PolicyName: AllowProcessingRoleAssumption
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Resource: !Sub arn:aws:iam::*:role/${ProcessingRoleToAssume}
            Action: sts:AssumeRole
      - PolicyName: AllowLambdaLogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*

  ValidateInputLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: ValidateInput Lambda
      Handler: lambda_function.lambda_handler
      MemorySize: 1024
      Architectures:
        - arm64
      Role: !GetAtt ValidateInputLambdaExecutionRole.Arn
      LoggingConfig:
        #ApplicationLogLevel: !FindInMap [Environment, !Ref "Environment", StateMachineLogLevel]
        LogFormat: JSON
        LogGroup: 
          !Join 
            - '/' 
            - - '/aws/lambda/{{ _copier_conf.dst_path }}/{{ PRODUCT_VERSION }}' 
              - !Select [4, !Split ['-', !Select ['2', !Split ['/', !Ref 'AWS::StackId']]]]
              - "{{ module_name_path_safe }}"
              - 'ValidateInput'
        #SystemLogLevel: String
      Layers:
        - !Ref UtilitiesLambdaLayer
      Runtime: python3.11
      Timeout: 90
      Environment:
        Variables:
          LOG_LEVEL: !FindInMap [Environment, !Ref "Environment", StateMachineLogLevel]
      Code:
        S3Bucket: <<<ARTIFACT_BUCKET>>>
        S3Key: <<<{{- module_name_path_safe -}}_lambda_functions_validate-input>>>

  # ValidateInput Lambda related
  ############################################

  ############################################
  # ProcessManifest Lambda related
  ProcessManifestLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !If [ IsDev, arn:aws:iam::aws:policy/AdministratorAccess, !Ref AWS::NoValue ]
      Policies:
      - PolicyName: AllowProcessingRoleAssumption
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Resource: !Sub arn:aws:iam::*:role/${ProcessingRoleToAssume}
            Action: sts:AssumeRole
      - PolicyName: AllowLambdaLogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*

  ProcessManifestLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: ProcessManifest Lambda
      Handler: lambda_function.lambda_handler
      MemorySize: 1024
      Architectures:
        - arm64
      Role: !GetAtt ProcessManifestLambdaExecutionRole.Arn
      LoggingConfig:
        #ApplicationLogLevel: !FindInMap [Environment, !Ref "Environment", StateMachineLogLevel]
        LogFormat: JSON
        LogGroup: 
          !Join 
            - '/' 
            - - '/aws/lambda/{{ _copier_conf.dst_path }}/{{ PRODUCT_VERSION }}' 
              - !Select [4, !Split ['-', !Select ['2', !Split ['/', !Ref 'AWS::StackId']]]]
              - "{{ module_name_path_safe }}"
              - 'ProcessManifest'
        #SystemLogLevel: String
      Environment:
        Variables: 
          ConfigS3Bucket: <<<ARTIFACT_BUCKET>>>
          ConfigS3Prefix: config/{{ _copier_conf.dst_path }}
          ApiDomain: !Ref ApiDomain
          ApiVersion: !Ref ApiVersion
          ApiKey: !Ref ApiKey
          DefaultRoleArnToAssume: {{ deployment_default_role_to_assume }}
      Layers:
        - !Ref UtilitiesLambdaLayer
      Runtime: python3.11
      Timeout: 90
      Code:
        S3Bucket: <<<ARTIFACT_BUCKET>>>
        S3Key: <<<{{- module_name_path_safe -}}_lambda_functions_process-manifest>>>
  # ProcessManifest Lambda related
  ############################################

  ############################################
  # Step Function related
  StepFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !If [ IsDev, arn:aws:iam::aws:policy/AdministratorAccess, !Ref AWS::NoValue ]
      Policies:
        - PolicyName: AllowProcessingRoleAssumption
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Resource: !Sub arn:aws:iam::*:role/${ProcessingRoleToAssume}
              Action: sts:AssumeRole
        - PolicyName: StepFunctionPolicy
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              - Effect: Allow
                Action:
                  - 'states:*'
                Resource: '*'
        - PolicyName: LogGroupPolicy
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutLogEvents
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: "*" # Please see https://docs.aws.amazon.com/step-functions/latest/dg/cw-logs.html#iam-policy-eg-for-cwl

  StepFunction:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StepFunctionRole.Arn
      StateMachineName: !Ref AWS::StackName
      TracingConfiguration:
        Enabled: true
      DefinitionS3Location:
        Bucket: <<<ARTIFACT_BUCKET>>>
        Key: {{ _copier_conf.dst_path }}/{{ PRODUCT_VERSION }}/<<<BUILD_ID>>>/{{ module_name_path_safe }}/templates/step_function_definition.yaml
      DefinitionSubstitutions:
        BucketName: <<<ARTIFACT_BUCKET>>>
        Version: {{ PRODUCT_VERSION }}
        BuildId: <<<BUILD_ID>>>
        StackName: {{ deployment_stack_name_prefix }}
        ValidateInputLambda: !GetAtt ValidateInputLambda.Arn
        CheckExistingSetupLambda: CloudCanvasCheckExistingSetup
        ProcessManifestLambda: !GetAtt ProcessManifestLambda.Arn

  # Step Function related
  ############################################