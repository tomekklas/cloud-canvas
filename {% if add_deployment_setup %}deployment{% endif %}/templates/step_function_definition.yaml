---
StartAt: Validate input
States:
  Validate input:
    Type: Task
    Resource: arn:aws:states:::lambda:invoke
    OutputPath: "$.Payload"
    Parameters:
      Payload.$: "$"
      FunctionName: ${ValidateInputLambda}
    Retry:
    - ErrorEquals:
      - Lambda.ServiceException
      - Lambda.AWSLambdaException
      - Lambda.SdkClientException
      - Lambda.TooManyRequestsException
      IntervalSeconds: 2
      MaxAttempts: 6
      BackoffRate: 2
    Catch:
    - ErrorEquals:
      - ManifestValidationError
      Next: ValidationError
    Comment: this is a test comment
    Next: Process the payload
  Process the payload:
    Type: Task
    Resource: arn:aws:states:::lambda:invoke
    OutputPath: "$.Payload"
    Parameters:
      Payload.$: "$"
      FunctionName: ${ProcessManifestLambda}
    Retry:
    - ErrorEquals:
      - Lambda.ServiceException
      - Lambda.AWSLambdaException
      - Lambda.SdkClientException
      - Lambda.TooManyRequestsException
      IntervalSeconds: 2
      MaxAttempts: 6
      BackoffRate: 2
    Comment: this is a test comment
    Next: Map the process
  ValidationError:
    Type: Fail
    Error: ManifestValidationError
    Cause: The Lambda function returned a ManifestValidationError.
  Map the process:
    Type: Map
    ToleratedFailurePercentage: 50
    ItemsPath: "$"
    End: true
    ItemReader:
      Resource: arn:aws:states:::s3:listObjectsV2
      Parameters:
        Bucket.$: "$.body.Bucket"
        Prefix.$: "$.body.Prefix"
    ItemProcessor:
      ProcessorConfig:
        Mode: DISTRIBUTED
        ExecutionType: STANDARD
      StartAt: Get config from S3
      States:
        Get config from S3:
          Type: Task
          Next: Check initial CloudFormation stack status
          Parameters:
            Bucket: deployment-idea-test-bucket
            Key.$: "$.Key"
          Resource: arn:aws:states:::aws-sdk:s3:getObject
          ResultSelector:
            Parameters.$: States.StringToJson($.Body)
        Check initial CloudFormation stack status:
          Type: Task
          Next: Can we update the stack?
          Parameters:
            StackName.$: States.Format('{}', $.Parameters.StackPrefix)
          Resource: arn:aws:states:::aws-sdk:cloudformation:describeStacks
          Catch:
          - ErrorEquals:
            - States.TaskFailed
            Next: Create the stack
            Comment: Stack does not exist produces and exception
            ResultPath:
          ResultPath: "$.StackStatus"
          ResultSelector:
            Status.$: "$.Stacks[0].StackStatus"
        Can we update the stack?:
          Type: Choice
          Choices:
          - Or:
            - Variable: "$.StackStatus.Status"
              StringEquals: CREATE_COMPLETE
            - Variable: "$.StackStatus.Status"
              StringEquals: UPDATE_COMPLETE
            Next: Update the stack
          Default: Pass
        Update the stack:
          Type: Task
          Parameters:
            StackName.$: States.Format('{}', $.Parameters.StackPrefix)
            TemplateURL.$: States.Format('{}', $.Parameters.TemplateUrl)
            Capabilities:
            - CAPABILITY_AUTO_EXPAND
            - CAPABILITY_IAM
            Parameters:
            - ParameterKey: Environment
              ParameterValue.$: States.Format('{}', $.Parameters.Parameters.Environment)
          Resource: arn:aws:states:::aws-sdk:cloudformation:updateStack
          Next: Wait a bit
          ResultPath:
        Create the stack:
          Type: Task
          Next: Wait a bit
          Parameters:
            StackName.$: States.Format('{}', $.Parameters.StackPrefix)
            TemplateURL.$: States.Format('{}', $.Parameters.TemplateUrl)
            Capabilities:
            - CAPABILITY_AUTO_EXPAND
            - CAPABILITY_IAM
          Resource: arn:aws:states:::aws-sdk:cloudformation:createStack
          ResultPath:
        Wait a bit:
          Type: Wait
          Seconds: 10
          Next: Check CloudFormation action status
        Check CloudFormation action status:
          Type: Task
          Next: Decide what to do based on current CloudFormation execution status
          Parameters:
            StackName.$: States.Format('{}', $.Parameters.StackPrefix)
          Resource: arn:aws:states:::aws-sdk:cloudformation:describeStacks
          ResultSelector:
            Status.$: "$.Stacks[0].StackStatus"
          ResultPath: "$.StackStatus"
        Decide what to do based on current CloudFormation execution status:
          Type: Choice
          Choices:
          - Or:
            - Variable: "$.StackStatus.Status"
              StringEquals: CREATE_IN_PROGRESS
            - Variable: "$.StackStatus.Status"
              StringEquals: UPDATE_IN_PROGRESS
            Next: Wait a bit
          - Or:
            - Variable: "$.StackStatus.Status"
              StringEquals: CREATE_COMPLETE
            - Variable: "$.StackStatus.Status"
              StringEquals: UPDATE_COMPLETE
            Next: Pass
          Default: Fail
        Pass:
          Type: Pass
          End: true
        Fail:
          Type: Fail
